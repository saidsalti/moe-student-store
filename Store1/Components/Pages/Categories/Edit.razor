@page "/categories/edit/{id:int?}"
@using Microsoft.AspNetCore.Authorization
@using Store1.Data.Dtos
@using Store1.Data.Entities
@using Store1.Data.Services
@inject ICategoryService _categoryService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

@inject IWebHostEnvironment _webHostEnvironment
@attribute [Authorize]

<MudGrid Spacing="6">
    @{
        if (!string.IsNullOrEmpty(ResponseMessage) && ResponseMessage != ""){
        // <MudAlert Severity="Severity.Success">@ResponseMessage</MudAlert>
            <MessageDisplay Message="@ResponseMessage" AlertSeverity="severity"></MessageDisplay>
        }
    }
    <MudItem xs="12">
        <MudText Typo="Typo.h3" Align="Align.Left">Add project</MudText>
    </MudItem>
    @*  <MudItem xs="12">
        <MudImage Src="@imagePath" Width="150"></MudImage>
    </MudItem> *@
    <MudItem xs="12" sm="8" md="6" lg="6">
        <MudPaper>
            <MudCard>
                <MudForm Model="model" @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                    <MudCardContent>
                        <MudGrid Spacing="3">
                            <MudItem xs="12">
                                <MudTextField @bind-Value="model.NameAr"
                                For="@(()=>model.NameAr)"
                                Immediate="true"
                                Label="Name ar" />
                            </MudItem>
                            <MudItem xs="12">
                                <MudCheckBox For="@(()=>model.IsActive)" @bind-Value="model.IsActive"></MudCheckBox>
                            </MudItem>
                            <MudItem xs="12">

                                <MudFileUpload T="IBrowserFile"
                                FilesChanged="uploadFiles">
                                    <ActivatorContent>
                                        <MudButton Variant="Variant.Filled"
                                        Color="Color.Primary"
                                        StartIcon="@Icons.Material.Filled.CloudUpload">
                                            Select Image
                                        </MudButton>
                                    </ActivatorContent>
                                </MudFileUpload>
                            </MudItem>
                            <MudItem xs="12">
                                <MudImage Src="@imagePath" Width="150"></MudImage>
                            </MudItem>
                        </MudGrid>
                    </MudCardContent>

                    <MudItem xs="12" >

                        <MudPaper Class="pa-4" >
                            <MudButton Variant="Variant.Filled" OnClick="saveData" Color="Color.Primary" Disabled="@(!success)" Class="ml-auto">Save</MudButton>

                        </MudPaper>
                    </MudItem>
                </MudForm>
            </MudCard>


        </MudPaper>
    </MudItem>
</MudGrid>
@code {
    [Parameter]
    public int? Id { get; set; }

    CategoryDto model = new();
    bool success;
    string[] errors = [];
    MudForm? form;
    string imagePath = string.Empty;
    string ResponseMessage=string.Empty;
    Severity severity = Severity.Info;
    protected override  Task OnInitializedAsync()
    {

        initData();
        return base.OnInitializedAsync();


    }
    private void initData(){
        if (Id == null)
        {
            NavigationManager.NavigateTo("/categories/index");

        }
        else
        {
            model = _categoryService.FindOneDto(Id)!;
            if (model == null)
            {
                NavigationManager.NavigateTo("/categories/add");

            }
            imagePath = $"/{model!.ImagePath!}";

        }
    }
    private async Task saveData()
    {
        ResponseMessage = string.Empty;
        var data = model;
        if (data.file != null)
        {
            var allowedExtensions = new[] { ".jpg", ".jpeg", ".png", ".gif" };
            var fileExtension = Path.GetExtension(data.file.Name).ToLower();
            if (Array.IndexOf(allowedExtensions, fileExtension) < 0)
            {
                return;
            }
            var fileName = $"{Path.GetRandomFileName()}{fileExtension}";
            var uploadPath = Path.Combine(_webHostEnvironment.WebRootPath, "images");
            if (!Directory.Exists(uploadPath))
            {
                Directory.CreateDirectory(uploadPath);
            }
            var filePath = Path.Combine(uploadPath, fileName);
            using (var stream = data.file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024))
            using (var fileStream = new FileStream(filePath, FileMode.Create))
            {
                await stream.CopyToAsync(fileStream);
            }
            data.ImagePath = $"images/{fileName}";
            var category = new Category
                {
                    Id=Id,
                    NameAr = data.NameAr,
                    ImagePath = data.ImagePath,
                    IsActive = data.IsActive,
                    OrderIndex = data.OrderIndex
                };
            var result = _categoryService.Update(category);
            showMessage(result);


        }else{
            var category = new Category
                {
                    Id=Id,
                    NameAr = data.NameAr,
                    ImagePath = data.ImagePath,
                    IsActive = data.IsActive,
                    OrderIndex = data.OrderIndex
                };

            var result = _categoryService.Update(category);
            showMessage(result);
        }
    }
    private void uploadFiles(IBrowserFile file)
    {
        model.file = file;
    }

    private void showMessage(int result){
        if (result > 0)
        {
            ResponseMessage = "Saved successfully";
            severity = Severity.Success;
        }
        else
        {
            ResponseMessage = "Failed to save";
            severity = Severity.Error;
        }
    }
}
